!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	src/kernel/ipc/testmsg.c	/^void A () { $/;"	f
ANY	include/msg.h	6;"	d
ASFLAGS	Makefile	/^ASFLAGS = -m32 -MD -I.\/include$/;"	m
B	src/kernel/ipc/testmsg.c	/^void B () { $/;"	f
C	src/kernel/ipc/testmsg.c	/^void C () { $/;"	f
CBUF_SZ	src/kernel/drivers/tty/term.h	35;"	d
CBUF_SZ	src/kernel/drivers/tty/tty.h	8;"	d
CC	Makefile	/^CC      = gcc$/;"	m
CFILES	Makefile	/^CFILES  = $(shell find src\/ -name "*.c")$/;"	m
CFLAGS	Makefile	/^CFLAGS  = -m32 -static -ggdb -MD -Wall -Werror -I.\/include -O2 \\$/;"	m
CR0	include/x86/cpu.h	/^typedef union CR0 {$/;"	u
CR0	include/x86/cpu.h	/^} CR0;$/;"	t	typeref:union:CR0
CR3	include/x86/cpu.h	/^typedef union CR3 {$/;"	u
CR3	include/x86/cpu.h	/^} CR3;$/;"	t	typeref:union:CR3
C_BLACK	src/kernel/drivers/tty/term.h	38;"	d
C_BLUE	src/kernel/drivers/tty/term.h	39;"	d
C_LWHITE	src/kernel/drivers/tty/term.h	41;"	d
C_WHITE	src/kernel/drivers/tty/term.h	40;"	d
Console	src/kernel/drivers/tty/tty.h	/^typedef struct Console {$/;"	s
Console	src/kernel/drivers/tty/tty.h	/^} Console;$/;"	t	typeref:struct:Console
D	src/kernel/ipc/testmsg.c	/^void D () { $/;"	f
DEV_READ	include/hal.h	7;"	d
DEV_WRITE	include/hal.h	8;"	d
DPL_KERNEL	include/x86/memory.h	9;"	d
DPL_USER	include/x86/memory.h	10;"	d
Dev	include/hal.h	/^} Dev;$/;"	t	typeref:struct:Device
Device	include/hal.h	/^typedef struct Device {$/;"	s
E	src/kernel/ipc/testmsg.c	/^void E () {$/;"	f
ELFHeader	boot/boot.h	/^struct ELFHeader {$/;"	s
ELFHeader	include/elf.h	/^struct ELFHeader {$/;"	s
ENTRY	src/kernel/drivers/pm/pm.c	58;"	d	file:
ET_DYN	include/elf.h	62;"	d
ET_EXEC	include/elf.h	61;"	d
ET_NONE	include/elf.h	59;"	d
ET_REL	include/elf.h	60;"	d
FILE_SIZE	src/kernel/drivers/fs/fs.c	5;"	d	file:
FILE_SIZE	src/kernel/drivers/pm/pm.c	8;"	d	file:
FM	include/services.h	4;"	d
FREE_PAGE	include/mm.h	7;"	d
FREQ_8253	src/kernel/drivers/timer/timer.c	10;"	d	file:
FREQ_8253	src/kernel/main.c	19;"	d	file:
FS	src/kernel/drivers/fs/fs.c	/^pid_t FS;$/;"	v
FS_READ	src/kernel/drivers/fs/fs.c	7;"	d	file:
FS_WRITE	src/kernel/drivers/fs/fs.c	8;"	d	file:
FUN	src/kernel/process/util.c	/^typedef void(*FUN)(void);$/;"	t	file:
GDT_ENTRY	boot/asm.h	2;"	d
GateDesc	include/x86/memory.h	/^} GateDesc;$/;"	t	typeref:struct:GateDescriptor
GateDescriptor	include/x86/memory.h	/^typedef struct GateDescriptor {$/;"	s
HZ	include/time.h	4;"	d
HZ	src/kernel/main.c	20;"	d	file:
IDE	src/kernel/drivers/ide/ide.c	/^pid_t IDE;$/;"	v
IDE_PORT_BASE	src/kernel/drivers/ide/disk.c	8;"	d	file:
IDE_PORT_CTRL	src/kernel/drivers/ide/disk.c	7;"	d	file:
IDE_READY	src/kernel/drivers/ide/ide.h	4;"	d
IDE_WRITEBACK	src/kernel/drivers/ide/ide.h	5;"	d
INTERRUPT_GATE_32	src/kernel/irq/idt.c	4;"	d	file:
IRQ_SLAVE	src/kernel/irq/i8259.c	5;"	d	file:
IRQ_t	src/kernel/irq/irq_handle.c	/^struct IRQ_t {$/;"	s	file:
KMEM	include/memory.h	26;"	d
KMEM_PID	src/kernel/drivers/ramdisk/kmem.c	/^pid_t KMEM_PID;$/;"	v
KOFFSET	boot/main.c	13;"	d	file:
KOFFSET	include/memory.h	7;"	d
KSTACK	include/process.h	7;"	d
K_ALT	src/kernel/drivers/tty/term.h	8;"	d
K_BACK	src/kernel/drivers/tty/term.h	11;"	d
K_CAPS	src/kernel/drivers/tty/term.h	4;"	d
K_CTRL	src/kernel/drivers/tty/term.h	7;"	d
K_DEL	src/kernel/drivers/tty/term.h	21;"	d
K_END	src/kernel/drivers/tty/term.h	19;"	d
K_ENTR	src/kernel/drivers/tty/term.h	10;"	d
K_F1	src/kernel/drivers/tty/term.h	23;"	d
K_F12	src/kernel/drivers/tty/term.h	29;"	d
K_F2	src/kernel/drivers/tty/term.h	24;"	d
K_F3	src/kernel/drivers/tty/term.h	25;"	d
K_F4	src/kernel/drivers/tty/term.h	26;"	d
K_F5	src/kernel/drivers/tty/term.h	27;"	d
K_F6	src/kernel/drivers/tty/term.h	28;"	d
K_HOME	src/kernel/drivers/tty/term.h	18;"	d
K_INS	src/kernel/drivers/tty/term.h	20;"	d
K_LEFT	src/kernel/drivers/tty/term.h	13;"	d
K_LSHFT	src/kernel/drivers/tty/term.h	5;"	d
K_PDWN	src/kernel/drivers/tty/term.h	17;"	d
K_PUP	src/kernel/drivers/tty/term.h	16;"	d
K_RIGHT	src/kernel/drivers/tty/term.h	14;"	d
K_RSHFT	src/kernel/drivers/tty/term.h	6;"	d
LBUF_SZ	src/kernel/drivers/tty/term.h	34;"	d
LBUF_SZ	src/kernel/drivers/tty/tty.h	7;"	d
LD	Makefile	/^LD      = ld$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = -melf_i386$/;"	m
ListHead	include/adt/list.h	/^struct ListHead {$/;"	s
ListHead	include/adt/list.h	/^typedef struct ListHead ListHead;$/;"	t	typeref:struct:ListHead
MAX_MSG	src/kernel/ipc/msg.c	3;"	d	file:
MAX_TIMER	src/kernel/drivers/timer/timer.c	12;"	d	file:
MAX_TIME_SLOT	include/process.h	10;"	d
MM_PID	src/kernel/memory/mm.c	/^pid_t MM_PID;$/;"	v
MSG_HARD_INTR	include/hal.h	10;"	d
MSG_POOL_SIZE	include/process.h	9;"	d
MSG_TTY_GETKEY	src/kernel/drivers/tty/tty.h	5;"	d
MSG_TTY_UPDATE	src/kernel/drivers/tty/tty.h	6;"	d
M_ALT	src/kernel/drivers/tty/term.h	32;"	d
M_CTRL	src/kernel/drivers/tty/term.h	31;"	d
Message	include/msg.h	/^typedef struct Message {$/;"	s
Msg	include/msg.h	/^} Msg;$/;"	t	typeref:struct:Message
NBUF	src/kernel/ipc/testpv.c	2;"	d	file:
NEW_PAGE	include/mm.h	6;"	d
NEW_PROCESS	src/kernel/drivers/pm/pm.c	9;"	d	file:
NEW_TIMER	include/timer.h	4;"	d
NR_CONS	src/kernel/ipc/testpv.c	4;"	d	file:
NR_DEV	src/kernel/drivers/hal.c	5;"	d	file:
NR_FILE	src/kernel/drivers/fs/fs.c	4;"	d	file:
NR_FILE_SIZE	src/kernel/drivers/ramdisk/ram.c	6;"	d	file:
NR_HARD_INTR	src/kernel/irq/irq_handle.c	6;"	d	file:
NR_IRQ	include/x86/cpu.h	112;"	d
NR_IRQ_HANDLE	src/kernel/irq/irq_handle.c	3;"	d	file:
NR_KERNEL_PAGE	src/kernel/memory/mm.c	8;"	d	file:
NR_MAX_FILE	src/kernel/drivers/ramdisk/ram.c	5;"	d	file:
NR_PAGE	src/kernel/memory/mm.c	7;"	d	file:
NR_PDE	include/x86/memory.h	29;"	d
NR_PROD	src/kernel/ipc/testpv.c	3;"	d	file:
NR_PTE	include/x86/memory.h	30;"	d
NR_SEC_CACHE	src/kernel/drivers/ide/cache.c	2;"	d	file:
NR_SEGMENTS	include/x86/memory.h	16;"	d
NR_TTY	src/kernel/drivers/tty/tty.h	4;"	d
NR_USER_PAGE	src/kernel/memory/mm.c	10;"	d	file:
NULL	include/const.h	7;"	d
OBJS	Makefile	/^OBJS    = $(CFILES:.c=.o) $(SFILES:.S=.o)$/;"	m
ONE_SECOND	include/timer.h	6;"	d
P	src/kernel/ipc/sem.c	/^void P(Sem *s) {$/;"	f
PAGE_SIZE	include/x86/memory.h	28;"	d
PCB	include/process.h	/^typedef struct PCB {$/;"	s
PCB	include/process.h	/^} PCB;$/;"	t	typeref:struct:PCB
PCB_NUM	include/process.h	8;"	d
PDE	include/x86/memory.h	/^} PDE;$/;"	t	typeref:union:PageDirectoryEntry
PD_SIZE	include/x86/memory.h	31;"	d
PHY_MEM	include/memory.h	29;"	d
PM	include/services.h	5;"	d
PM	src/kernel/drivers/pm/pm.c	/^pid_t PM;$/;"	v
PORT_PIC_MASTER	src/kernel/irq/i8259.c	3;"	d	file:
PORT_PIC_SLAVE	src/kernel/irq/i8259.c	4;"	d	file:
PORT_RTC	src/kernel/drivers/timer/timer.c	9;"	d	file:
PORT_TIME	src/kernel/drivers/timer/timer.c	8;"	d	file:
PORT_TIME	src/kernel/main.c	18;"	d	file:
PTE	include/x86/memory.h	/^} PTE;$/;"	t	typeref:union:PageTableEntry
PT_DYNAMIC	include/elf.h	68;"	d
PT_LOAD	include/elf.h	67;"	d
PT_NOTE	include/elf.h	69;"	d
PT_NULL	include/elf.h	66;"	d
PageDirectoryEntry	include/x86/memory.h	/^typedef union PageDirectoryEntry {$/;"	u
PageTableEntry	include/x86/memory.h	/^typedef union PageTableEntry {$/;"	u
ProgramHeader	boot/boot.h	/^struct ProgramHeader {$/;"	s
ProgramHeader	include/elf.h	/^struct ProgramHeader {$/;"	s
QEMU	Makefile	/^QEMU    = qemu-system-i386$/;"	m
QINTR	src/kernel/main.c	/^void QINTR(void) {$/;"	f
RAM	src/kernel/drivers/ramdisk/ram.c	/^pid_t RAM;$/;"	v
READ_KMEM	src/kernel/test/kmem_read_test.c	/^pid_t READ_KMEM;$/;"	v
RSTK_SZ	src/kernel/drivers/tty/tty.h	9;"	d
SCR_H	src/kernel/drivers/tty/term.h	44;"	d
SCR_W	src/kernel/drivers/tty/term.h	43;"	d
SECTSIZE	boot/main.c	12;"	d	file:
SEG_32BIT	include/x86/memory.h	5;"	d
SEG_4KB_GRANULARITY	include/x86/memory.h	6;"	d
SEG_ASM	boot/asm.h	11;"	d
SEG_CODEDATA	include/x86/memory.h	4;"	d
SEG_EXECUTABLE	include/x86/memory.h	14;"	d
SEG_KERNEL_CODE	include/x86/memory.h	18;"	d
SEG_KERNEL_DATA	include/x86/memory.h	19;"	d
SEG_NULL	include/x86/memory.h	17;"	d
SEG_NULLASM	boot/asm.h	5;"	d
SEG_READABLE	include/x86/memory.h	13;"	d
SEG_TSS	include/x86/memory.h	22;"	d
SEG_TSS_32BIT	include/x86/memory.h	7;"	d
SEG_USER_CODE	include/x86/memory.h	20;"	d
SEG_USER_DATA	include/x86/memory.h	21;"	d
SEG_WRITABLE	include/x86/memory.h	12;"	d
SELECTOR_KERNEL	include/x86/memory.h	24;"	d
SELECTOR_USER	include/x86/memory.h	25;"	d
SERIAL_PORT	src/lib/serial.c	3;"	d	file:
SFILES	Makefile	/^SFILES  = $(shell find src\/ -name "*.S")$/;"	m
STATE	include/process.h	/^enum STATE {$/;"	g
SYS_EXCE	include/do_syscall.h	7;"	d
SYS_FORK	include/do_syscall.h	8;"	d
SYS_READ	include/do_syscall.h	5;"	d
SYS_SCHEDULE	include/do_syscall.h	9;"	d
SYS_WRITE	include/do_syscall.h	6;"	d
SectorCache	src/kernel/drivers/ide/cache.c	/^struct SectorCache {$/;"	s	file:
SegDesc	include/x86/memory.h	/^} SegDesc;$/;"	t	typeref:struct:SegmentDescriptor
SegmentDescriptor	include/x86/memory.h	/^typedef struct SegmentDescriptor {$/;"	s
Sem	include/sem.h	/^} Sem;$/;"	t	typeref:struct:Semaphore
Semaphore	include/sem.h	/^typedef struct Semaphore {$/;"	s
TASK_BLOCKED	include/process.h	/^    TASK_BLOCKED,   \/\/in block list$/;"	e	enum:STATE
TASK_DEAD	include/process.h	/^    TASK_DEAD,      \/\/process exit$/;"	e	enum:STATE
TASK_EMPTY	include/process.h	/^    TASK_EMPTY = 0,  \/\/show an empty slot, put in free4$/;"	e	enum:STATE
TASK_INTERRUPTIBLE	include/process.h	/^    TASK_INTERRUPTIBLE,$/;"	e	enum:STATE
TASK_READY	include/process.h	/^    TASK_READY,     \/\/in ready queue$/;"	e	enum:STATE
TASK_RUNNING	include/process.h	/^    TASK_RUNNING=1, \/\/ put in ready list$/;"	e	enum:STATE
TASK_STOPED	include/process.h	/^    TASK_STOPED,$/;"	e	enum:STATE
TASK_UNINTERRUPTIBLE	include/process.h	/^    TASK_UNINTERRUPTIBLE$/;"	e	enum:STATE
TIMER	src/kernel/drivers/timer/timer.c	/^pid_t TIMER;$/;"	v
TIME_OUT	include/timer.h	5;"	d
TRAP_GATE_32	src/kernel/irq/idt.c	5;"	d	file:
TSS	include/x86/memory.h	/^typedef struct TSS {$/;"	s
TSS	include/x86/memory.h	/^} TSS;$/;"	t	typeref:struct:TSS
TTY	src/kernel/drivers/tty/tty.c	/^pid_t TTY;$/;"	v
Time	include/time.h	/^typedef struct Time {$/;"	s
Time	include/time.h	/^} Time;$/;"	t	typeref:struct:Time
TrapFrame	include/x86/memory.h	/^typedef struct TrapFrame {$/;"	s
TrapFrame	include/x86/memory.h	/^} TrapFrame;$/;"	t	typeref:struct:TrapFrame
USER_PAGE_OFFSET	src/kernel/memory/mm.c	9;"	d	file:
V	src/kernel/ipc/sem.c	/^void V(Sem *s) {$/;"	f
VA	src/kernel/test/kmem_read_test.c	7;"	d	file:
WRITEBACK_TIME	src/kernel/drivers/ide/ide.c	7;"	d	file:
ZERO	src/kernel/drivers/ramdisk/zero.c	/^pid_t ZERO;$/;"	v
__ASSERT_H__	include/assert.h	2;"	d
__COMMON_H__	include/common.h	2;"	d
__CONST_H__	include/const.h	2;"	d
__DO_SYSCALL_H_	include/do_syscall.h	2;"	d
__ELF_H_	include/elf.h	2;"	d
__FS_H_	include/fs.h	2;"	d
__HAL_H__	include/hal.h	2;"	d
__IDE_H__	src/kernel/drivers/ide/ide.h	2;"	d
__KCPY_H__	include/kcpy.h	2;"	d
__KERNEL_H__	include/kernel.h	2;"	d
__LIST_H__	include/adt/list.h	2;"	d
__MEMORY_H__	include/memory.h	2;"	d
__MM_H_	include/mm.h	2;"	d
__MSG_H__	include/msg.h	2;"	d
__PROCESS_H__	include/process.h	2;"	d
__SEMAPHORE_H__	include/sem.h	2;"	d
__SERVICES_H_	include/services.h	2;"	d
__STRING_H__	include/string.h	2;"	d
__TERM_H__	src/kernel/drivers/tty/term.h	2;"	d
__TIMER_H__	include/timer.h	2;"	d
__TIME_H__	include/time.h	2;"	d
__TTY_H__	src/kernel/drivers/tty/tty.h	2;"	d
__TYPES_H__	include/types.h	2;"	d
__X86_CPU_H__	include/x86/cpu.h	2;"	d
__X86_H__	include/x86/x86.h	2;"	d
__X86_IO_H__	include/x86/io.h	2;"	d
__X86_MEMORY_H__	include/x86/memory.h	2;"	d
_new_page	src/kernel/memory/mm.c	/^static int _new_page(PCB *pcb, uint32_t va) {$/;"	f	file:
_receive	src/kernel/ipc/msg.c	/^void _receive(pid_t src,Msg *msg) {$/;"	f
_send	src/kernel/ipc/msg.c	/^void _send(struct PCB *pcb,Msg *msg) {$/;"	f
accessed	include/x86/memory.h	/^		uint32_t accessed            : 1;$/;"	m	struct:PageDirectoryEntry::__anon4
accessed	include/x86/memory.h	/^		uint32_t accessed            : 1;$/;"	m	struct:PageTableEntry::__anon5
add_irq_handle	src/kernel/irq/irq_handle.c	/^add_irq_handle(int irq, void (*func)(void) ) {$/;"	f
align	boot/boot.h	/^	unsigned int align;$/;"	m	struct:ProgramHeader
align	include/elf.h	/^	unsigned int align;$/;"	m	struct:ProgramHeader
align_to_page	include/x86/memory.h	35;"	d
align_to_page	src/kernel/memory/kvm.c	/^static PDE kpdir[NR_PDE] align_to_page;						\/\/ kernel page directory$/;"	v	file:
align_to_page	src/kernel/memory/kvm.c	/^static PTE kptable[PHY_MEM \/ PAGE_SIZE] align_to_page;		\/\/ kernel page tables$/;"	v	file:
alignment_mask	include/x86/cpu.h	/^		uint32_t alignment_mask      : 1;$/;"	m	struct:CR0::__anon6
alloc_pages	src/kernel/memory/mm.c	/^int alloc_pages(PCB* pcb, uint32_t va, uint32_t len) {$/;"	f
alt	src/kernel/drivers/tty/keyboard.c	/^static int caps, ctrl, alt, shft;$/;"	v	file:
ani	src/kernel/drivers/tty/banner.c	/^static char ani[] = "-\\\\|\/";$/;"	v	file:
asm_do_irq	src/kernel/irq/do_irq.S	/^asm_do_irq:$/;"	l
assert	include/assert.h	17;"	d
backsp	src/kernel/drivers/tty/console.c	/^backsp(Console *c) {$/;"	f	file:
banner	src/kernel/drivers/tty/console.c	/^char banner[SCR_W + 1];$/;"	v
base_15_0	include/x86/memory.h	/^	uint32_t base_15_0           : 16;$/;"	m	struct:SegmentDescriptor
base_23_16	include/x86/memory.h	/^	uint32_t base_23_16          : 8;$/;"	m	struct:SegmentDescriptor
base_31_24	include/x86/memory.h	/^	uint32_t base_31_24          : 8;$/;"	m	struct:SegmentDescriptor
block	include/sem.h	/^    ListHead block;$/;"	m	struct:Semaphore
block	src/kernel/process/schedule.c	/^ListHead ready ,block,free;$/;"	v
bool	include/types.h	/^typedef unsigned char  bool;$/;"	t
bootmain	boot/main.c	/^bootmain(void) {$/;"	f
buf	include/msg.h	/^            void *buf;$/;"	m	struct:Message::__anon2::__anon3
buf	src/kernel/drivers/pm/pm.c	/^static uint8_t buf[FILE_SIZE];$/;"	v	file:
buf	src/kernel/ipc/testpv.c	/^int buf[NBUF],f=0,r=0,g=1;$/;"	v
cache	src/kernel/drivers/ide/cache.c	/^static struct SectorCache cache[NR_SEC_CACHE];$/;"	v	typeref:struct:SectorCache	file:
cache_disable	include/x86/cpu.h	/^		uint32_t cache_disable       : 1;$/;"	m	struct:CR0::__anon6
cache_fetch	src/kernel/drivers/ide/cache.c	/^cache_fetch(uint32_t sector) {$/;"	f	file:
cache_init	src/kernel/drivers/ide/cache.c	/^cache_init(void) {$/;"	f
cache_writeback	src/kernel/drivers/ide/cache.c	/^cache_writeback(void) {$/;"	f
caps	src/kernel/drivers/tty/keyboard.c	/^static int caps, ctrl, alt, shft;$/;"	v	file:
cbuf	src/kernel/drivers/tty/tty.h	/^	char cbuf[CBUF_SZ + 1];$/;"	m	struct:Console
cli	include/x86/cpu.h	/^cli(void) {$/;"	f
consl_accept	src/kernel/drivers/tty/console.c	/^consl_accept(Console *c, char ch) {$/;"	f
consl_feed	src/kernel/drivers/tty/console.c	/^consl_feed(Console *c, int key) {$/;"	f
consl_sync	src/kernel/drivers/tty/console.c	/^consl_sync(Console *c) {$/;"	f
consl_writec	src/kernel/drivers/tty/console.c	/^consl_writec(Console *c, char ch) {$/;"	f
content	src/kernel/drivers/ide/cache.c	/^	uint8_t content[512];$/;"	m	struct:SectorCache	file:
cook	src/kernel/drivers/tty/console.c	/^cook(Console *c) {$/;"	f	file:
copy_from_kernel	src/lib/kcpy.c	/^void copy_from_kernel(PCB* pcb, void* dest, void* src, int len){$/;"	f
copy_to_kernel	src/lib/kcpy.c	/^void copy_to_kernel(PCB* pcb, void* dest, void* src, int len){$/;"	f
counter	include/process.h	/^    uint32_t counter;       \/\/for scheduling$/;"	m	struct:PCB
cr	src/kernel/drivers/tty/console.c	/^cr(Console *c) {$/;"	f	file:
cr3	include/process.h	/^    CR3   cr3;$/;"	m	struct:PCB
create_kthread	src/kernel/process/util.c	/^create_kthread(void *fun) {$/;"	f
create_process	src/kernel/drivers/pm/pm.c	/^PCB* create_process(uint8_t *buf) {$/;"	f
create_thread	src/kernel/drivers/pm/pm.c	/^pid_t create_thread() {$/;"	f
cs	include/x86/memory.h	/^	uint32_t eip, cs, eflags;							\/\/ execution state saved by hardware$/;"	m	struct:TrapFrame
ctrl	src/kernel/drivers/tty/keyboard.c	/^static int caps, ctrl, alt, shft;$/;"	v	file:
current	src/kernel/process/schedule.c	/^PCB idle, *current = &idle;$/;"	v
current_consl	src/kernel/drivers/tty/console.c	/^Console *current_consl;$/;"	v
day	include/time.h	/^	int year, month, day;$/;"	m	struct:Time
del	src/kernel/drivers/tty/console.c	/^del(Console *c) {$/;"	f	file:
dest	include/msg.h	/^    pid_t src,dest;$/;"	m	struct:Message
dev_id	include/hal.h	/^	int dev_id;$/;"	m	struct:Device
dev_id	include/msg.h	/^            int dev_id;$/;"	m	struct:Message::__anon2::__anon3
dev_pool	src/kernel/drivers/hal.c	/^static Dev dev_pool[NR_DEV];$/;"	v	file:
dev_read	src/kernel/drivers/hal.c	/^dev_read(const char *dev_name, pid_t reqst_pid, void *buf, off_t offset, size_t len) {$/;"	f
dev_rw	src/kernel/drivers/hal.c	/^dev_rw(const char *dev_name, int type, pid_t reqst_pid, void *buf, off_t offset, size_t len) {$/;"	f	file:
dev_write	src/kernel/drivers/hal.c	/^dev_write(const char *dev_name, pid_t reqst_pid, void *buf, off_t offset, size_t len) {$/;"	f
devices	src/kernel/drivers/hal.c	/^static ListHead freeDevs, devices;$/;"	v	file:
die	testbash.sh	/^function die {$/;"	f
dirty	include/x86/memory.h	/^		uint32_t dirty               : 1;$/;"	m	struct:PageTableEntry::__anon5
dirty	src/kernel/drivers/ide/cache.c	/^	bool used, dirty;$/;"	m	struct:SectorCache	file:
disk	src/kernel/drivers/ramdisk/ram.c	/^static uint8_t *disk = (void*)file;$/;"	v	file:
disk_do_read	src/kernel/drivers/ide/disk.c	/^disk_do_read(void *buf, uint32_t sector) {$/;"	f
disk_do_write	src/kernel/drivers/ide/disk.c	/^disk_do_write(void *buf, uint32_t sector) {$/;"	f
do_read	src/kernel/drivers/fs/fs.c	/^size_t do_read(int file_name, uint8_t *buf, off_t offset, size_t len) {$/;"	f
do_syscall	src/kernel/syscall/do_syscall.c	/^void do_syscall(TrapFrame *tf) {$/;"	f
dont_care	include/x86/memory.h	/^	uint8_t dont_care[88];$/;"	m	struct:TSS
draw	src/kernel/drivers/tty/console.c	/^draw(char ch) {$/;"	f	file:
draw2	src/kernel/drivers/tty/banner.c	/^draw2(char **p, int q) {$/;"	f	file:
ds	include/x86/memory.h	/^	uint32_t gs, fs, es, ds;							\/\/ data segment registers$/;"	m	struct:TrapFrame
eax	include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;	\/\/ GPRs$/;"	m	struct:TrapFrame
ebp	include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;	\/\/ GPRs$/;"	m	struct:TrapFrame
ebx	include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;	\/\/ GPRs$/;"	m	struct:TrapFrame
ecx	include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;	\/\/ GPRs$/;"	m	struct:TrapFrame
edi	include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;	\/\/ GPRs$/;"	m	struct:TrapFrame
edx	include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;	\/\/ GPRs$/;"	m	struct:TrapFrame
eflags	include/x86/memory.h	/^	uint32_t eip, cs, eflags;							\/\/ execution state saved by hardware$/;"	m	struct:TrapFrame
ehsize	boot/boot.h	/^	unsigned short ehsize;$/;"	m	struct:ELFHeader
ehsize	include/elf.h	/^	unsigned short ehsize;$/;"	m	struct:ELFHeader
eip	include/x86/memory.h	/^	uint32_t eip, cs, eflags;							\/\/ execution state saved by hardware$/;"	m	struct:TrapFrame
elf	boot/boot.h	/^	unsigned char  elf[12];$/;"	m	struct:ELFHeader
elf	include/elf.h	/^	unsigned char  elf[12];$/;"	m	struct:ELFHeader
empty	src/kernel/ipc/testpv.c	/^Sem empty,full,mutex_r,mutex_w;$/;"	v
emulation	include/x86/cpu.h	/^		uint32_t emulation           : 1;$/;"	m	struct:CR0::__anon6
entry	boot/boot.h	/^	unsigned int   entry;$/;"	m	struct:ELFHeader
entry	include/elf.h	/^	unsigned int   entry;$/;"	m	struct:ELFHeader
error_code	include/x86/memory.h	/^	uint32_t error_code;								\/\/ error code$/;"	m	struct:TrapFrame
es	include/x86/memory.h	/^	uint32_t gs, fs, es, ds;							\/\/ data segment registers$/;"	m	struct:TrapFrame
esi	include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;	\/\/ GPRs$/;"	m	struct:TrapFrame
esp	include/x86/memory.h	/^	uint32_t esp, ss;									\/\/ only uses when DPL = 3$/;"	m	struct:TrapFrame
esp0	include/x86/memory.h	/^	uint32_t esp0;$/;"	m	struct:TSS
extension_type	include/x86/cpu.h	/^		uint32_t extension_type      : 1;$/;"	m	struct:CR0::__anon6
f	src/kernel/drivers/tty/tty.h	/^	int i, f, r;$/;"	m	struct:Console
f	src/kernel/ipc/testpv.c	/^int buf[NBUF],f=0,r=0,g=1;$/;"	v
false	include/const.h	5;"	d
fetch_pcb	src/kernel/process/util.c	/^struct PCB* fetch_pcb(pid_t pid) {$/;"	f
ffun	src/kernel/process/util.c	/^void ffun() {$/;"	f
file	src/kernel/drivers/ramdisk/ram.c	/^static uint8_t file[NR_MAX_FILE][NR_FILE_SIZE] = {$/;"	v	file:
filesz	boot/boot.h	/^	unsigned int filesz;$/;"	m	struct:ProgramHeader
filesz	include/elf.h	/^	unsigned int filesz;$/;"	m	struct:ProgramHeader
find_free	src/kernel/memory/mm.c	/^static uint32_t find_free(uint32_t *n) {$/;"	f	file:
find_pos	src/kernel/memory/mm.c	/^static inline void find_pos(uint32_t *bucket, uint32_t *bit, uint32_t n) {$/;"	f	file:
flags	boot/boot.h	/^	unsigned int   flags;$/;"	m	struct:ELFHeader
flags	boot/boot.h	/^	unsigned int flags;$/;"	m	struct:ProgramHeader
flags	include/elf.h	/^	unsigned int   flags;$/;"	m	struct:ELFHeader
flags	include/elf.h	/^	unsigned int flags;$/;"	m	struct:ProgramHeader
free	src/kernel/process/schedule.c	/^ListHead ready ,block,free;$/;"	v
freeDevs	src/kernel/drivers/hal.c	/^static ListHead freeDevs, devices;$/;"	v	file:
fs	include/x86/memory.h	/^	uint32_t gs, fs, es, ds;							\/\/ data segment registers$/;"	m	struct:TrapFrame
fs_thread	src/kernel/drivers/fs/fs.c	/^static void fs_thread(void) {$/;"	f	file:
full	src/kernel/ipc/testpv.c	/^Sem empty,full,mutex_r,mutex_w;$/;"	v
g	src/kernel/ipc/testpv.c	/^int buf[NBUF],f=0,r=0,g=1;$/;"	v
gdt	boot/start.S	/^gdt:$/;"	l
gdt	src/kernel/memory/kvm.c	/^static SegDesc gdt[NR_SEGMENTS];$/;"	v	file:
gdtdesc	boot/start.S	/^gdtdesc:                      # descriptor$/;"	l
getFreePCB	src/kernel/process/util.c	/^PCB* getFreePCB() {$/;"	f
get_cooked	src/kernel/drivers/tty/console.c	/^get_cooked(Console *c, pid_t pid, char *buf, int count) {$/;"	f	file:
get_current_tty	src/kernel/drivers/tty/console.c	/^get_current_tty(void) {$/;"	f
get_jiffy	src/kernel/drivers/timer/timer.c	/^get_jiffy() {$/;"	f
get_kcr3	src/kernel/memory/kvm.c	/^inline CR3* get_kcr3() {$/;"	f
get_kpdir	src/kernel/memory/kvm.c	/^inline PDE* get_kpdir() {$/;"	f
get_kptable	src/kernel/memory/kvm.c	/^inline PTE* get_kptable() {$/;"	f
get_pte_ind	src/kernel/memory/util.c	/^inline uint32_t get_pte_ind(uint32_t n) {$/;"	f
get_time	src/kernel/drivers/timer/timer.c	/^get_time(Time *tm) {$/;"	f
getty	src/kernel/drivers/tty/getty.c	/^getty(void) {$/;"	f	file:
global	include/x86/memory.h	/^		uint32_t global              : 1;$/;"	m	struct:PageTableEntry::__anon5
global_pid	src/kernel/process/schedule.c	/^pid_t global_pid = 5; \/\/idle.id = 0$/;"	v
granularity	include/x86/memory.h	/^	uint32_t granularity         : 1;$/;"	m	struct:SegmentDescriptor
gs	include/x86/memory.h	/^	uint32_t gs, fs, es, ds;							\/\/ data segment registers$/;"	m	struct:TrapFrame
h	src/kernel/drivers/tty/tty.h	/^	int w, h, wh;$/;"	m	struct:Console
hal_get	src/kernel/drivers/hal.c	/^static Dev *hal_get(const char *name) {$/;"	f	file:
hal_get_id	src/kernel/drivers/hal.c	/^void hal_get_id(const char *name, pid_t *pid, int *dev_id) {$/;"	f
hal_list	src/kernel/drivers/hal.c	/^void hal_list(void) {$/;"	f
hal_register	src/kernel/drivers/hal.c	/^void hal_register(const char *name, pid_t pid, int dev_id) {$/;"	f
handle_count	src/kernel/irq/irq_handle.c	/^static int handle_count = 0;$/;"	v	file:
handle_pool	src/kernel/irq/irq_handle.c	/^static struct IRQ_t handle_pool[NR_IRQ_HANDLE];$/;"	v	typeref:struct:IRQ_t	file:
handles	src/kernel/irq/irq_handle.c	/^static struct IRQ_t *handles[NR_HARD_INTR];$/;"	v	typeref:struct:IRQ_t	file:
head	include/process.h	/^    struct ListHead head; \/\/form a list for all process,$/;"	m	struct:PCB	typeref:struct:PCB::ListHead
hour	include/time.h	/^	int hour, minute, second;$/;"	m	struct:Time
i	include/msg.h	/^        int i[5];$/;"	m	union:Message::__anon2
i	src/kernel/drivers/tty/tty.h	/^	int i, f, r;$/;"	m	struct:Console
ide_driver_thread	src/kernel/drivers/ide/ide.c	/^ide_driver_thread(void) {$/;"	f	file:
ide_intr	src/kernel/drivers/ide/ide.c	/^ide_intr(void) {$/;"	f	file:
ide_prepare	src/kernel/drivers/ide/disk.c	/^ide_prepare(uint32_t sector) {$/;"	f	file:
idle	src/kernel/process/schedule.c	/^PCB idle, *current = &idle;$/;"	v
idt	src/kernel/irq/idt.c	/^static GateDesc idt[NR_IRQ];$/;"	v	file:
in_byte	boot/boot.h	/^in_byte(short port) {$/;"	f
in_byte	include/x86/io.h	/^in_byte(uint16_t port) {$/;"	f
in_long	boot/boot.h	/^in_long(short port) {$/;"	f
in_long	include/x86/io.h	/^in_long(uint16_t port) {$/;"	f
init_consl	src/kernel/drivers/tty/console.c	/^init_consl(int tty_index) {$/;"	f	file:
init_console	src/kernel/drivers/tty/console.c	/^void init_console(void) {$/;"	f
init_driver	src/kernel/drivers/drivers.c	/^void init_driver() {$/;"	f
init_fs	src/kernel/drivers/fs/fs.c	/^void init_fs() {$/;"	f
init_getty	src/kernel/drivers/tty/getty.c	/^init_getty(void) {$/;"	f
init_hal	src/kernel/drivers/hal.c	/^void init_hal(void) {$/;"	f
init_i8253	src/kernel/drivers/timer/timer.c	/^init_i8253(void) {$/;"	f	file:
init_ide	src/kernel/drivers/ide/ide.c	/^init_ide(void) {$/;"	f
init_idt	src/kernel/irq/idt.c	/^void init_idt() {$/;"	f
init_intr	src/kernel/irq/i8259.c	/^void init_intr(void) {$/;"	f
init_kmem	src/kernel/drivers/ramdisk/kmem.c	/^void init_kmem(void) {$/;"	f
init_kmem_read_test	src/kernel/test/kmem_read_test.c	/^void init_kmem_read_test(void) {$/;"	f
init_mm	src/kernel/memory/mm.c	/^void init_mm(void) {$/;"	f
init_msg_pool	src/kernel/process/util.c	/^void init_msg_pool(struct PCB *pcb) { $/;"	f
init_page	src/kernel/memory/kvm.c	/^init_page(void) {$/;"	f
init_pm	src/kernel/drivers/pm/pm.c	/^void init_pm() {$/;"	f
init_proc	src/kernel/process/util.c	/^init_proc() {$/;"	f
init_ram	src/kernel/drivers/ramdisk/ram.c	/^void init_ram(void) {$/;"	f
init_rt	src/kernel/drivers/timer/timer.c	/^init_rt(void) {$/;"	f	file:
init_segment	src/kernel/memory/kvm.c	/^init_segment(void) {$/;"	f
init_sem	src/kernel/ipc/sem.c	/^void init_sem(Sem *s,int count) {$/;"	f
init_serial	src/lib/serial.c	/^init_serial(void) {$/;"	f
init_timer	src/kernel/drivers/timer/timer.c	/^void init_timer(void) {$/;"	f
init_tty	src/kernel/drivers/tty/tty.c	/^void init_tty(void) {$/;"	f
init_zero	src/kernel/drivers/ramdisk/zero.c	/^void init_zero(void) {$/;"	f
int16_t	include/types.h	/^typedef          short int16_t;$/;"	t
int2Str	src/lib/printk.c	/^uint32_t int2Str(char* str,int32_t n,int32_t base) {    $/;"	f
int32_t	include/types.h	/^typedef          int   int32_t;$/;"	t
int8_t	include/types.h	/^typedef          char  int8_t;$/;"	t
intr_counter	include/process.h	/^    uint32_t intr_counter; \/\/record intr count for recursive sti$/;"	m	struct:PCB
irq	include/x86/memory.h	/^	int32_t irq;										\/\/ #irq$/;"	m	struct:TrapFrame
irq_handle	src/kernel/irq/irq_handle.c	/^void irq_handle(TrapFrame *tf) {$/;"	f
is_free	src/kernel/memory/mm.c	/^static inline uint32_t is_free(uint32_t n) {$/;"	f	file:
issue_read	src/kernel/drivers/ide/disk.c	/^issue_read() {$/;"	f	file:
issue_write	src/kernel/drivers/ide/disk.c	/^issue_write() {$/;"	f	file:
itoa	src/lib/string.c	/^char *itoa(int a) {$/;"	f
jiffy	src/kernel/drivers/timer/timer.c	/^static long jiffy = 0;$/;"	v	file:
just_for_test	src/kernel/process/schedule.c	/^void just_for_test(){};$/;"	f
kcr3	src/kernel/memory/kvm.c	/^static CR3 kcr3;											\/\/ kernel CR3$/;"	v	file:
keychar	src/kernel/drivers/tty/keyboard.c	/^static int keychar[2][128] = {$/;"	v	file:
kmem_read_test_thread	src/kernel/test/kmem_read_test.c	/^void kmem_read_test_thread() {$/;"	f
kmem_thread	src/kernel/drivers/ramdisk/kmem.c	/^static void kmem_thread(void) {$/;"	f	file:
kstack	include/process.h	/^	char kstack[KSTACK];$/;"	m	struct:PCB
last	src/kernel/ipc/testpv.c	/^int last = 0;$/;"	v
lbuf	src/kernel/drivers/tty/tty.h	/^	char lbuf[LBUF_SZ + 1];$/;"	m	struct:Console
len	include/msg.h	/^            size_t len;$/;"	m	struct:Message::__anon2::__anon3
lf	src/kernel/drivers/tty/console.c	/^lf(Console *c) {$/;"	f	file:
limit_15_0	include/x86/memory.h	/^	uint32_t limit_15_0          : 16;$/;"	m	struct:SegmentDescriptor
limit_19_16	include/x86/memory.h	/^	uint32_t limit_19_16         : 4;$/;"	m	struct:SegmentDescriptor
list	include/hal.h	/^	ListHead list;$/;"	m	struct:Device
list	include/msg.h	/^    ListHead list;$/;"	m	struct:Message
list	src/kernel/drivers/timer/timer.c	/^    ListHead list;$/;"	m	struct:timer	file:
list_add	include/adt/list.h	/^list_add(ListHead *prev, ListHead *next, ListHead *data) {$/;"	f
list_add_after	include/adt/list.h	/^list_add_after(ListHead *list, ListHead *data) {$/;"	f
list_add_before	include/adt/list.h	/^list_add_before(ListHead *list, ListHead *data) {$/;"	f
list_del	include/adt/list.h	/^list_del(ListHead *data) {$/;"	f
list_empty	include/adt/list.h	/^list_empty(ListHead *list) {$/;"	f
list_entry	include/adt/list.h	11;"	d
list_foreach	include/adt/list.h	56;"	d
list_init	include/adt/list.h	/^list_init(ListHead *list) {$/;"	f
lock	src/kernel/ipc/sem.c	/^void lock() {$/;"	f
logo	src/lib/logo.c	/^unsigned char logo[] = {$/;"	v
machine	boot/boot.h	/^	unsigned short machine;$/;"	m	struct:ELFHeader
machine	include/elf.h	/^	unsigned short machine;$/;"	m	struct:ELFHeader
magic	boot/boot.h	/^	unsigned int   magic;$/;"	m	struct:ELFHeader
magic	include/elf.h	/^	unsigned int   magic;$/;"	m	struct:ELFHeader
make_invalid_pde	src/kernel/memory/util.c	/^make_invalid_pde(PDE *p) {$/;"	f
make_invalid_pte	src/kernel/memory/util.c	/^make_invalid_pte(PTE *p) {$/;"	f
make_pde	src/kernel/memory/util.c	/^make_pde(PDE *p, void *addr) {$/;"	f
make_pte	src/kernel/memory/util.c	/^make_pte(PTE *p, void *addr) {$/;"	f
md	src/kernel/drivers/timer/timer.c	/^md(int year, int month) {$/;"	f	file:
memcpy	src/lib/string.c	/^void memcpy(void *dest, const void *src, size_t size) {$/;"	f
memset	src/lib/string.c	/^void memset(void *dest, uint8_t data, size_t size) {$/;"	f
memsz	boot/boot.h	/^	unsigned int memsz;$/;"	m	struct:ProgramHeader
memsz	include/elf.h	/^	unsigned int memsz;$/;"	m	struct:ProgramHeader
minute	include/time.h	/^	int hour, minute, second;$/;"	m	struct:Time
mm_bits	src/kernel/memory/mm.c	/^uint8_t mm_bits[(NR_USER_PAGE >>3)];\/\/ bitmap to manage pages, no need to add one.$/;"	v
mm_thread	src/kernel/memory/mm.c	/^static void mm_thread(void) {$/;"	f	file:
monitor_coprocessor	include/x86/cpu.h	/^		uint32_t monitor_coprocessor : 1;$/;"	m	struct:CR0::__anon6
month	include/time.h	/^	int year, month, day;$/;"	m	struct:Time
movl	src/kernel/drivers/tty/console.c	/^movl(Console *c) {$/;"	f	file:
movr	src/kernel/drivers/tty/console.c	/^movr(Console *c) {$/;"	f	file:
msg	src/kernel/drivers/timer/timer.c	/^    Msg msg; \/\/to store the reply msg$/;"	m	struct:timer	file:
msg_free	include/process.h	/^    struct ListHead msg_free;     \/\/for free msg structure$/;"	m	struct:PCB	typeref:struct:PCB::ListHead
msg_list	include/process.h	/^    struct ListHead msg_list; \/\/msg queue$/;"	m	struct:PCB	typeref:struct:PCB::ListHead
msg_pool	include/process.h	/^    struct Message msg_pool[MSG_POOL_SIZE];$/;"	m	struct:PCB	typeref:struct:PCB::Message
mutex_r	src/kernel/ipc/testpv.c	/^Sem empty,full,mutex_r,mutex_w;$/;"	v
mutex_w	src/kernel/ipc/testpv.c	/^Sem empty,full,mutex_r,mutex_w;$/;"	v
name	include/hal.h	/^	const char *name;$/;"	m	struct:Device
name	src/kernel/drivers/tty/tty.h	/^	const char *name;$/;"	m	struct:Console
new_page	src/kernel/memory/mm.c	/^static int new_page(PCB* pcb, uint32_t va_start, uint32_t memsz) {$/;"	f	file:
next	include/adt/list.h	/^	struct ListHead *prev, *next;$/;"	m	struct:ListHead	typeref:struct:ListHead::
next	src/kernel/drivers/tty/console.c	/^next(Console *c) {$/;"	f	file:
next	src/kernel/irq/irq_handle.c	/^	struct IRQ_t *next;$/;"	m	struct:IRQ_t	typeref:struct:IRQ_t::IRQ_t	file:
no_write_through	include/x86/cpu.h	/^		uint32_t no_write_through    : 1;$/;"	m	struct:CR0::__anon6
numeric_error	include/x86/cpu.h	/^		uint32_t numeric_error       : 1;$/;"	m	struct:CR0::__anon6
off	boot/boot.h	/^	unsigned int off;$/;"	m	struct:ProgramHeader
off	include/elf.h	/^	unsigned int off;$/;"	m	struct:ProgramHeader
off_t	include/types.h	/^typedef          int   off_t;$/;"	t
offset	include/msg.h	/^            off_t offset;$/;"	m	struct:Message::__anon2::__anon3
offset_15_0	include/x86/memory.h	/^	uint32_t offset_15_0      : 16;$/;"	m	struct:GateDescriptor
offset_31_16	include/x86/memory.h	/^	uint32_t offset_31_16     : 16;$/;"	m	struct:GateDescriptor
operation_size	include/x86/memory.h	/^	uint32_t operation_size      : 1;$/;"	m	struct:SegmentDescriptor
os_init	src/kernel/main.c	/^os_init(void) {$/;"	f
os_init_cont	src/kernel/main.c	/^os_init_cont(void) {$/;"	f
out_byte	boot/boot.h	/^out_byte(short port, char data) {$/;"	f
out_byte	include/x86/io.h	/^out_byte(uint16_t port, uint8_t data) {$/;"	f
out_long	include/x86/io.h	/^out_long(uint16_t port, uint32_t data) {$/;"	f
pa_page	src/kernel/memory/mm.c	/^static inline void* pa_page(uint32_t n) {$/;"	f	file:
pa_to_va	include/memory.h	22;"	d
pad0	include/x86/cpu.h	/^		uint32_t pad0                : 10;$/;"	m	struct:CR0::__anon6
pad0	include/x86/cpu.h	/^		uint32_t pad0                : 3;$/;"	m	struct:CR3::__anon7
pad0	include/x86/memory.h	/^		uint32_t pad0                : 1;$/;"	m	struct:PageTableEntry::__anon5
pad0	include/x86/memory.h	/^		uint32_t pad0                : 6;$/;"	m	struct:PageDirectoryEntry::__anon4
pad0	include/x86/memory.h	/^	uint32_t pad0                : 1;$/;"	m	struct:SegmentDescriptor
pad0	include/x86/memory.h	/^	uint32_t pad0             : 8;$/;"	m	struct:GateDescriptor
pad1	include/x86/cpu.h	/^		uint32_t pad1                : 1; $/;"	m	struct:CR0::__anon6
pad1	include/x86/cpu.h	/^		uint32_t pad1                : 7;$/;"	m	struct:CR3::__anon7
pad1	include/x86/memory.h	/^		uint32_t pad1                : 3;$/;"	m	struct:PageTableEntry::__anon5
pad2	include/x86/cpu.h	/^		uint32_t pad2                : 10;$/;"	m	struct:CR0::__anon6
paddr	boot/boot.h	/^	unsigned int paddr;$/;"	m	struct:ProgramHeader
paddr	include/elf.h	/^	unsigned int paddr;$/;"	m	struct:ProgramHeader
page_cache_disable	include/x86/cpu.h	/^		uint32_t page_cache_disable  : 1;$/;"	m	struct:CR3::__anon7
page_cache_disable	include/x86/memory.h	/^		uint32_t page_cache_disable  : 1;$/;"	m	struct:PageDirectoryEntry::__anon4
page_cache_disable	include/x86/memory.h	/^		uint32_t page_cache_disable  : 1;$/;"	m	struct:PageTableEntry::__anon5
page_directory_base	include/x86/cpu.h	/^		uint32_t page_directory_base : 20;$/;"	m	struct:CR3::__anon7
page_frame	include/x86/memory.h	/^		uint32_t page_frame          : 20;$/;"	m	struct:PageDirectoryEntry::__anon4
page_frame	include/x86/memory.h	/^		uint32_t page_frame          : 20;$/;"	m	struct:PageTableEntry::__anon5
page_write_through	include/x86/cpu.h	/^		uint32_t page_write_through  : 1;$/;"	m	struct:CR3::__anon7
page_write_through	include/x86/memory.h	/^		uint32_t page_write_through  : 1;$/;"	m	struct:PageDirectoryEntry::__anon4
page_write_through	include/x86/memory.h	/^		uint32_t page_write_through  : 1;$/;"	m	struct:PageTableEntry::__anon5
paging	include/x86/cpu.h	/^		uint32_t paging              : 1;$/;"	m	struct:CR0::__anon6
panic	include/assert.h	8;"	d
parent	include/process.h	/^    pid_t parent;         \/\/parent process id$/;"	m	struct:PCB
pcbPool	src/kernel/process/schedule.c	/^PCB pcbPool[PCB_NUM];$/;"	v
pcb_va_to_pa	src/kernel/memory/util.c	/^uint32_t pcb_va_to_pa(PCB *pcb, uint32_t va) {$/;"	f
phentsize	boot/boot.h	/^	unsigned short phentsize;$/;"	m	struct:ELFHeader
phentsize	include/elf.h	/^	unsigned short phentsize;$/;"	m	struct:ELFHeader
phnum	boot/boot.h	/^	unsigned short phnum;$/;"	m	struct:ELFHeader
phnum	include/elf.h	/^	unsigned short phnum;$/;"	m	struct:ELFHeader
phoff	boot/boot.h	/^	unsigned int   phoff;$/;"	m	struct:ELFHeader
phoff	include/elf.h	/^	unsigned int   phoff;$/;"	m	struct:ELFHeader
pid	include/hal.h	/^	pid_t pid;$/;"	m	struct:Device
pid	include/process.h	/^    pid_t pid;            \/\/process id$/;"	m	struct:PCB
pid	src/kernel/drivers/timer/timer.c	/^    pid_t pid;$/;"	m	struct:timer	file:
pidA	src/kernel/ipc/testmsg.c	/^pid_t pidE,pidA,pidB,pidC,pidD;$/;"	v
pidB	src/kernel/ipc/testmsg.c	/^pid_t pidE,pidA,pidB,pidC,pidD;$/;"	v
pidC	src/kernel/ipc/testmsg.c	/^pid_t pidE,pidA,pidB,pidC,pidD;$/;"	v
pidD	src/kernel/ipc/testmsg.c	/^pid_t pidE,pidA,pidB,pidC,pidD;$/;"	v
pidE	src/kernel/ipc/testmsg.c	/^pid_t pidE,pidA,pidB,pidC,pidD;$/;"	v
pid_t	include/types.h	/^typedef          int   pid_t;$/;"	t
pm_thread	src/kernel/drivers/pm/pm.c	/^void pm_thread() {$/;"	f
pos	src/kernel/drivers/tty/tty.h	/^	int size, pos;$/;"	m	struct:Console
ppcb	include/process.h	/^    struct PCB *ppcb;     \/\/parent process pointer$/;"	m	struct:PCB	typeref:struct:PCB::PCB
present	include/x86/memory.h	/^		uint32_t present             : 1;$/;"	m	struct:PageDirectoryEntry::__anon4
present	include/x86/memory.h	/^		uint32_t present             : 1;$/;"	m	struct:PageTableEntry::__anon5
present	include/x86/memory.h	/^	uint32_t present             : 1;$/;"	m	struct:SegmentDescriptor
present	include/x86/memory.h	/^	uint32_t present          : 1;$/;"	m	struct:GateDescriptor
prev	include/adt/list.h	/^	struct ListHead *prev, *next;$/;"	m	struct:ListHead	typeref:struct:ListHead::ListHead
prev	include/x86/memory.h	/^	uint32_t prev;			\/\/ don't care$/;"	m	struct:TSS
printStr	src/lib/printk.c	/^void printStr(void (*printer)(char),const char *str) {$/;"	f
print_msg	src/kernel/ipc/msg.c	/^void print_msg(Msg *msg) {$/;"	f
printk	src/lib/printk.c	/^printk(const char *ctl, ...) {$/;"	f
privilege_level	include/x86/memory.h	/^	uint32_t privilege_level     : 2;$/;"	m	struct:SegmentDescriptor
privilege_level	include/x86/memory.h	/^	uint32_t privilege_level  : 2;$/;"	m	struct:GateDescriptor
protect_enable	include/x86/cpu.h	/^		uint32_t protect_enable      : 1;$/;"	m	struct:CR0::__anon6
putc	src/kernel/drivers/tty/console.c	/^putc(Console *c, char ch) {$/;"	f	file:
r	src/kernel/drivers/tty/tty.h	/^	int i, f, r;$/;"	m	struct:Console
r	src/kernel/ipc/testpv.c	/^int buf[NBUF],f=0,r=0,g=1;$/;"	v
ram_thread	src/kernel/drivers/ramdisk/ram.c	/^static void ram_thread(void) {$/;"	f	file:
read_byte	src/kernel/drivers/ide/cache.c	/^read_byte(uint32_t offset) {$/;"	f
read_cr0	include/x86/cpu.h	/^read_cr0() {$/;"	f
read_eflags	include/x86/cpu.h	/^read_eflags(void) {$/;"	f
read_request	src/kernel/drivers/tty/console.c	/^read_request(Msg *m) {$/;"	f
read_write	include/x86/memory.h	/^		uint32_t read_write          : 1; $/;"	m	struct:PageDirectoryEntry::__anon4
read_write	include/x86/memory.h	/^		uint32_t read_write          : 1;$/;"	m	struct:PageTableEntry::__anon5
readkey	src/kernel/drivers/tty/keyboard.c	/^readkey(void) {$/;"	f
readsect	boot/main.c	/^readsect(void *dst, int offset) {$/;"	f
readseg	boot/main.c	/^readseg(unsigned char *pa, int count, int offset) {$/;"	f
ready	src/kernel/process/schedule.c	/^ListHead ready ,block,free;$/;"	v
receive	src/kernel/ipc/msg.c	/^void receive(pid_t src, Msg *msg) {$/;"	f
removec	src/kernel/drivers/tty/console.c	/^removec(Console *c) {$/;"	f	file:
req_pid	include/msg.h	/^            pid_t req_pid;$/;"	m	struct:Message::__anon2::__anon3
ret	include/msg.h	/^        int ret;$/;"	m	union:Message::__anon1
routine	src/kernel/irq/irq_handle.c	/^	void (*routine)(void);$/;"	m	struct:IRQ_t	file:
rstk	src/kernel/drivers/tty/tty.h	/^	Msg rstk[RSTK_SZ];$/;"	m	struct:Console
rt	src/kernel/drivers/timer/timer.c	/^static Time rt;$/;"	v	file:
rtop	src/kernel/drivers/tty/tty.h	/^	int rtop;$/;"	m	struct:Console
schedule	src/kernel/process/schedule.c	/^schedule(void) {$/;"	f
scr	src/kernel/drivers/tty/tty.h	/^	uint16_t *scr;$/;"	m	struct:Console
scrup	src/kernel/drivers/tty/console.c	/^scrup(Console *c) {$/;"	f	file:
second	include/time.h	/^	int hour, minute, second;$/;"	m	struct:Time
sector	src/kernel/drivers/ide/cache.c	/^	uint32_t sector;$/;"	m	struct:SectorCache	file:
segment	include/x86/memory.h	/^	uint32_t segment          : 16;$/;"	m	struct:GateDescriptor
segment_type	include/x86/memory.h	/^	uint32_t segment_type        : 1;$/;"	m	struct:SegmentDescriptor
sem_list	include/process.h	/^    struct ListHead sem_list; \/\/ wait on semaphore$/;"	m	struct:PCB	typeref:struct:PCB::ListHead
send	src/kernel/ipc/msg.c	/^void send(pid_t dest, Msg *msg) {$/;"	f
send_keymsg	src/kernel/drivers/tty/keyboard.c	/^send_keymsg(void) {$/;"	f
send_updatemsg	src/kernel/drivers/tty/console.c	/^send_updatemsg(void) {$/;"	f	file:
serial_idle	src/lib/serial.c	/^serial_idle(void) {$/;"	f	file:
serial_printc	src/lib/serial.c	/^serial_printc(char ch) {$/;"	f
set	src/kernel/memory/mm.c	/^static void set(uint32_t n) {$/;"	f	file:
set_intr	src/kernel/irq/idt.c	/^static void set_intr(GateDesc *ptr, uint32_t selector, uint32_t offset, uint32_t dpl) {$/;"	f	file:
set_kthread_state	src/kernel/process/util.c	/^void set_kthread_state(PCB *p, enum STATE state) {$/;"	f
set_segment	src/kernel/memory/kvm.c	/^set_segment(SegDesc *ptr, uint32_t pl, uint32_t type) {$/;"	f	file:
set_trap	src/kernel/irq/idt.c	/^static void set_trap(GateDesc *ptr, uint32_t selector, uint32_t offset, uint32_t dpl) {$/;"	f	file:
set_tss	src/kernel/memory/kvm.c	/^set_tss(SegDesc *ptr) {$/;"	f	file:
set_tss_esp0	src/kernel/memory/kvm.c	/^inline void set_tss_esp0(uint32_t esp) {$/;"	f
shentsize	boot/boot.h	/^	unsigned short shentsize;$/;"	m	struct:ELFHeader
shentsize	include/elf.h	/^	unsigned short shentsize;$/;"	m	struct:ELFHeader
shft	src/kernel/drivers/tty/keyboard.c	/^static int caps, ctrl, alt, shft;$/;"	v	file:
shnum	boot/boot.h	/^	unsigned short shnum;$/;"	m	struct:ELFHeader
shnum	include/elf.h	/^	unsigned short shnum;$/;"	m	struct:ELFHeader
shoff	boot/boot.h	/^	unsigned int   shoff;$/;"	m	struct:ELFHeader
shoff	include/elf.h	/^	unsigned int   shoff;$/;"	m	struct:ELFHeader
shstrndx	boot/boot.h	/^	unsigned short shstrndx;$/;"	m	struct:ELFHeader
shstrndx	include/elf.h	/^	unsigned short shstrndx;$/;"	m	struct:ELFHeader
size	src/kernel/drivers/tty/tty.h	/^	int size, pos;$/;"	m	struct:Console
size_t	include/types.h	/^typedef          int   size_t;$/;"	t
sleep	src/kernel/process/util.c	/^void sleep(void) {$/;"	f
soft_use	include/x86/memory.h	/^	uint32_t soft_use            : 1;$/;"	m	struct:SegmentDescriptor
src	include/msg.h	/^    pid_t src,dest;$/;"	m	struct:Message
ss	include/x86/memory.h	/^	uint32_t esp, ss;									\/\/ only uses when DPL = 3$/;"	m	struct:TrapFrame
ss0	include/x86/memory.h	/^	uint32_t ss0;$/;"	m	struct:TSS
start	boot/start.S	/^start:$/;"	l
start32	boot/start.S	/^start32:$/;"	l
state	include/process.h	/^    enum STATE state;     \/\/process state$/;"	m	struct:PCB	typeref:enum:PCB::STATE
sti	include/x86/cpu.h	/^sti(void) {$/;"	f
strcmp	src/lib/string.c	/^int strcmp(const char* s1, const char*s2) {$/;"	f
strcpy	src/lib/string.c	/^void strcpy(char *d, const char *s) {$/;"	f
strcpy_from_kernel	src/lib/kcpy.c	/^void strcpy_from_kernel(PCB* pcb, char* dest, char* src){$/;"	f
strcpy_to_kernel	src/lib/kcpy.c	/^void strcpy_to_kernel(PCB* pcb, char* dest, char* src){$/;"	f
strlen	src/lib/string.c	/^size_t strlen(const char *str) {$/;"	f
syscall	src/kernel/syscall/syscall.c	/^syscall(int id,...) {$/;"	f
system	include/x86/memory.h	/^	uint32_t system           : 1;$/;"	m	struct:GateDescriptor
task_switched	include/x86/cpu.h	/^		uint32_t task_switched       : 1;$/;"	m	struct:CR0::__anon6
test_consumer	src/kernel/ipc/testpv.c	/^void test_consumer(void) {$/;"	f
test_msg	src/kernel/ipc/testmsg.c	/^void test_msg() {$/;"	f
test_producer	src/kernel/ipc/testpv.c	/^void test_producer(void) {$/;"	f
test_setup	src/kernel/ipc/testpv.c	/^void test_setup(void) {$/;"	f
tf	include/process.h	/^    void *tf;$/;"	m	struct:PCB
threadWrapper	src/kernel/process/util.c	/^void threadWrapper(void *fun) {$/;"	f
time_intr	src/kernel/drivers/ide/ide.c	/^time_intr(void) {$/;"	f	file:
time_out	src/kernel/drivers/timer/timer.c	/^    int time_out; \/\/when reach 0,return message$/;"	m	struct:timer	file:
timer	src/kernel/drivers/timer/timer.c	/^typedef struct timer{$/;"	s	file:
timer	src/kernel/drivers/timer/timer.c	/^} timer;$/;"	t	typeref:struct:timer	file:
timer_driver_thread	src/kernel/drivers/timer/timer.c	/^timer_driver_thread(void) {$/;"	f	file:
to_next_page	src/kernel/drivers/pm/pm.c	/^static inline uint32_t to_next_page(uint32_t addr) {$/;"	f	file:
token	include/sem.h	/^    volatile int token;$/;"	m	struct:Semaphore
true	include/const.h	4;"	d
tsc	src/kernel/drivers/tty/banner.c	/^static int tsc = 0;$/;"	v	file:
tss	src/kernel/memory/kvm.c	/^static TSS tss; $/;"	v	file:
tty_idx	src/kernel/drivers/tty/getty.c	/^static int tty_idx = 1;$/;"	v	file:
ttyd	src/kernel/drivers/tty/tty.c	/^ttyd(void) {$/;"	f	file:
ttynames	src/kernel/drivers/tty/console.c	/^static const char *ttynames[NR_TTY] = {"tty1", "tty2", "tty3", "tty4"};$/;"	v	file:
ttys	src/kernel/drivers/tty/console.c	/^Console ttys[NR_TTY];$/;"	v
type	boot/boot.h	/^	unsigned int type;$/;"	m	struct:ProgramHeader
type	boot/boot.h	/^	unsigned short type;$/;"	m	struct:ELFHeader
type	include/elf.h	/^	unsigned int type;$/;"	m	struct:ProgramHeader
type	include/elf.h	/^	unsigned short type;$/;"	m	struct:ELFHeader
type	include/msg.h	/^        int type;$/;"	m	union:Message::__anon1
type	include/x86/memory.h	/^	uint32_t type                : 4;$/;"	m	struct:SegmentDescriptor
type	include/x86/memory.h	/^	uint32_t type             : 4;$/;"	m	struct:GateDescriptor
uint16_t	include/types.h	/^typedef unsigned short uint16_t;$/;"	t
uint2Str	src/lib/printk.c	/^uint32_t uint2Str (char *str,uint32_t n, uint32_t base) {$/;"	f
uint32_t	include/types.h	/^typedef unsigned int   uint32_t;$/;"	t
uint8_t	include/types.h	/^typedef unsigned char  uint8_t;$/;"	t
unlock	src/kernel/ipc/sem.c	/^void unlock() {$/;"	f
update_banner	src/kernel/drivers/tty/banner.c	/^void update_banner(void) {$/;"	f
update_jiffy	src/kernel/drivers/timer/timer.c	/^update_jiffy(void) {$/;"	f	file:
used	src/kernel/drivers/ide/cache.c	/^	bool used, dirty;$/;"	m	struct:SectorCache	file:
user_supervisor	include/x86/memory.h	/^		uint32_t user_supervisor     : 1;$/;"	m	struct:PageDirectoryEntry::__anon4
user_supervisor	include/x86/memory.h	/^		uint32_t user_supervisor     : 1;$/;"	m	struct:PageTableEntry::__anon5
va_page	src/kernel/memory/mm.c	/^static inline void* va_page(uint32_t n) {$/;"	f	file:
va_to_pa	include/memory.h	19;"	d
va_to_pa_i386	src/kernel/memory/util.c	/^uint32_t va_to_pa_i386(uint32_t pde_addr, uint32_t va) {$/;"	f
va_to_page	src/kernel/memory/mm.c	/^static inline  uint32_t va_to_page(uint32_t va) {$/;"	f	file:
vaddr	boot/boot.h	/^	unsigned int vaddr;$/;"	m	struct:ProgramHeader
vaddr	include/elf.h	/^	unsigned int vaddr;$/;"	m	struct:ProgramHeader
val	include/x86/cpu.h	/^	uint32_t val;$/;"	m	union:CR0
val	include/x86/cpu.h	/^	uint32_t val;$/;"	m	union:CR3
val	include/x86/memory.h	/^	uint32_t val;$/;"	m	union:PageDirectoryEntry
val	include/x86/memory.h	/^	uint32_t val;$/;"	m	union:PageTableEntry
vbuf	src/kernel/drivers/tty/console.c	/^static uint16_t vbuf[NR_TTY][SCR_W * SCR_H * 2];$/;"	v	file:
vbuf	src/kernel/drivers/tty/tty.h	/^	uint16_t *vbuf;$/;"	m	struct:Console
version	boot/boot.h	/^	unsigned int   version;$/;"	m	struct:ELFHeader
version	include/elf.h	/^	unsigned int   version;$/;"	m	struct:ELFHeader
vfprintf	src/lib/printk.c	/^void vfprintf(void (*printer)(char), const char *ctl, void **args) {$/;"	f
vmem	src/kernel/drivers/tty/console.c	/^static uint16_t *vmem = (void*)pa_to_va(0xb8000);$/;"	v	file:
w	src/kernel/drivers/tty/tty.h	/^	int w, h, wh;$/;"	m	struct:Console
wait_intr	include/x86/cpu.h	/^wait_intr() {$/;"	f
waitdisk	boot/main.c	/^waitdisk(void) {$/;"	f
wakeup	src/kernel/process/util.c	/^void wakeup(PCB *p) {$/;"	f
welcome	src/kernel/main.c	/^welcome(void) {$/;"	f
wh	src/kernel/drivers/tty/tty.h	/^	int w, h, wh;$/;"	m	struct:Console
write_byte	src/kernel/drivers/ide/cache.c	/^write_byte(uint32_t offset, uint8_t data) {$/;"	f
write_cr0	include/x86/cpu.h	/^write_cr0(CR0 *cr0) {$/;"	f
write_cr3	include/x86/cpu.h	/^write_cr3(CR3 *cr3) {$/;"	f
write_gdtr	include/x86/cpu.h	/^write_gdtr(void *addr, uint32_t size) {$/;"	f
write_idtr	include/x86/cpu.h	/^write_idtr(void *addr, uint32_t size) {$/;"	f
write_protect	include/x86/cpu.h	/^		uint32_t write_protect       : 1; $/;"	m	struct:CR0::__anon6
write_tr	include/x86/cpu.h	/^write_tr(uint16_t selector) {$/;"	f
xxx	include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;	\/\/ GPRs$/;"	m	struct:TrapFrame
year	include/time.h	/^	int year, month, day;$/;"	m	struct:Time
zero_thread	src/kernel/drivers/ramdisk/zero.c	/^static void zero_thread(void) {$/;"	f	file:
